# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - code_style_check
  - testing
  - deploy

build:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - cd src/cat/
    - make
    - cd ../grep/
    - make
  artifacts:
    paths:
      - src/cat/s21_cat
      - src/grep/s21_grep
    expire_in: 30 days
  after_script:
    - if [ $CI_JOB_STATUS == "failed" ]; then bash src/notify.sh "CI" "$CI_JOB_STATUS (build)"; fi

code_style_check:
    stage: code_style_check
    script:
        - cd src/cat/
        - output=$(clang-format -style=google -Werror -n *.c)
        - if [ -n "$output" ]; then echo "$output"; exit 1; fi
        - cd ../grep/
        - output=$(clang-format -style=google -Werror -n *.c *.h)
        - if [ -n "$output" ]; then echo "$output"; exit 1; fi
    after_script:
        - if [ $CI_JOB_STATUS == "failed" ]; then bash src/notify.sh "CI" "$CI_JOB_STATUS (code_style_check)"; fi

testing:
    stage: testing
    script:
        - cd src/cat
        - bash test.sh
        - cd ../grep
        - bash test.sh
    dependencies:
      - build
      - code_style_check
    after_script:
        - if [ $CI_JOB_STATUS == "failed" ]; then bash src/notify.sh "CI" "$CI_JOB_STATUS (testing)"; else bash notify.sh "CI" $CI_JOB_STATUS; fi

deploy:
    stage: deploy
    script:
        - sshpass -p "1" scp src/cat/s21_cat mariselo@172.24.116.8:/usr/local/bin
        - sshpass -p "1" scp src/grep/s21_grep mariselo@172.24.116.8:/usr/local/bin
    when: manual
    dependencies:
        - build
        - code_style_check
        - testing
    after_script:
        - cd src
        - bash notify.sh "CD" "$CI_JOB_STATUS (deploy)"